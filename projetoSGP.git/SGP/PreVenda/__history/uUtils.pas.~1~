unit uUtils;

interface
  uses
    RzDBEdit, sysUtils, StrUtils, Windows, Graphics;

  Type

  TUtils = class

  private
    const
      textEmptyColor: TColor = $000404FF;
      textNormalColor: TColor = clMoneyGreen;
      textReadyOnlyColor: TColor = clInfoBk;

  protected

  public
     function VerificaCampoObrigatorio(campo: TRzDBEdit) : Boolean;
     function ValidaInteiroFloat(valor: string; tipo: char): Double;
     procedure ResetColorCampo(campo: TRzDBEdit; isReadOnly: Boolean);
     function AdicionaMascaraDinheiro(valor: string): string;
     function RetiraMascaraDinheiro(valor : string): string;
     function FormataParcelas(valor: string): string;

  published

  end;

implementation

{ TUtils }

{ TUtils }

function TUtils.AdicionaMascaraDinheiro(valor: string): string;
var
  temp : string;
  index, countTotal, countPart, countExclud : integer;
begin
  valor := FormatCurr('R$ #,##0.00', StrToFloat(valor));
 { if not(AnsiContainsStr(valor, ',')) then
    valor := valor + ',00';

  temp:= AnsiStrPos(Pchar(valor), ',');
  if Length(temp) < 3 then
    valor := valor + '0'
  else
    if Length(temp) > 3 then
    begin
      countTotal := Length(valor);
      countPart := Length(temp);
      countExclud := (countPart - 3);
      index := (countTotal - countExclud + 1);
      Delete(valor, index, countExclud);
    end;

  Result := 'R$ ' + valor;    }
  Result := valor;
end;

function TUtils.FormataParcelas(valor: string): string;
begin
  while Length(valor) < 3 do
  begin
    valor := '0' + valor;
  end;
  Result := valor;
end;

procedure TUtils.ResetColorCampo(campo: TRzDBEdit; isReadOnly: Boolean);
begin
  if not(isReadOnly) then
  begin
    campo.Color := textNormalColor;
  end
  else
  begin
    campo.Color := textReadyOnlyColor;
    campo.ReadOnlyColor := textReadyOnlyColor;
    campo.FocusColor := textReadyOnlyColor;
  end;
end;

function TUtils.RetiraMascaraDinheiro(valor: string): string;
begin
  //Delete (valor, 1, 3);
  valor := StringReplace(valor, 'R$', '', []);
  valor := StringReplace(valor, ' ', '', []);
  valor := StringReplace(valor, '.', '', []);
  Result := valor;
end;

function TUtils.ValidaInteiroFloat(valor: string; tipo: char): Double;
var
  temp : Double;
begin
  try
    valor :=    StringReplace(valor, '.', '', []);
    if tipo = 'I' then
      temp := StrToInt(valor)
    else
      temp := StrToFloat(valor);
      
    Result := temp;
  except
     Result := 0;
  end;
end;

function TUtils.VerificaCampoObrigatorio(campo: TRzDBEdit) : Boolean;
var
  teste : string;
begin
    if Trim(campo.Text) = '' then
    begin
//      teste  := IntToStr(campo.Name);
      campo.Color := textEmptyColor;
      campo.ReadOnlyColor := textEmptyColor;
      Result := True;
    end
    else
    begin
      campo.Color := textNormalColor;
      Result := False;
    end;
end;

end.
