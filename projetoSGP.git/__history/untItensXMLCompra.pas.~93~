unit untItensXMLCompra;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, Datasnap.DBClient,
  pFIBClientDataSet, Vcl.Grids, Vcl.DBGrids, JvExDBGrids, JvDBGrid, RzButton,
  Vcl.StdCtrls, RzLabel, Vcl.Imaging.pngimage, Vcl.ExtCtrls, JvExExtCtrls, ClipBrd,
  JvImage, RzPanel, RzBckgnd;

type
  TfrmItensXMLCompra = class(TForm)
    RzBackground1: TRzBackground;
    RzPanel1: TRzPanel;
    JvImage1: TJvImage;
    lblTituloCliente: TRzLabel;
    btnPrior: TRzBitBtn;
    btnFirst: TRzBitBtn;
    btnNext: TRzBitBtn;
    btnLast: TRzBitBtn;
    RzLabel41: TRzLabel;
    lblEncontrados: TRzLabel;
    RzLabel40: TRzLabel;
    lblNovos: TRzLabel;
    gdrCadItens: TJvDBGrid;
    btnCancelar: TRzBitBtn;
    btnGravar: TRzBitBtn;
    dsCadastroItens: TDataSource;
    imgLink2: TImage;
    imgLink1: TImage;
    imgCancelLink1: TImage;
    imgCancelLink2: TImage;
    imgChequed1: TImage;
    imgChequed2: TImage;
    procedure btnGravarClick(Sender: TObject);
    procedure gdrCadItensDrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure gdrCadItensMouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure gdrCadItensCellClick(Column: TColumn);
    procedure gdrCadItensDblClick(Sender: TObject);
    procedure btnCancelarClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

type
    THackGrid = class(TCustomDBGrid); //criar uma nova classe pra acessar as propriedades privadas

var
  frmItensXMLCompra: TfrmItensXMLCompra;

implementation

{$R *.dfm}

uses untCompras, untData, untPesqProdutoItens;

procedure TfrmItensXMLCompra.btnCancelarClick(Sender: TObject);
begin
  Case MessageBox(Application.Handle, Pchar('Deseja realmente abandonar o lançamento de Compra atual?'), 'Atenção', MB_YESNO + MB_ICONQUESTION + MB_DEFBUTTON2) of
          idYes: begin
                    ModalResult := mrCancel;
                 end;
      end;
end;

procedure TfrmItensXMLCompra.btnGravarClick(Sender: TObject);
begin
  ModalResult := mrOk;
end;

procedure TfrmItensXMLCompra.gdrCadItensCellClick(Column: TColumn);
var
  i : SmallInt;
  nome : string;
begin
  if (Column.Index = 4) and (frmCompras.cdsCadadastroItensENCONTROU.AsString = 'N') then
  begin
    if frmCompras.cdsCadadastroItensID.AsInteger = 0 then
    begin
      Try
        nome := frmCompras.cdsCadadastroItensNOME.AsString;
        i := Pos(' ', nome);
        nome := nome.Substring(0, i - 1);

        frmPesqProdutoItens := TfrmPesqProdutoItens.Create(nil);
        frmPesqProdutoItens.edtNome.Text := nome;
        frmPesqProdutoItens.Pesquisar;
        frmPesqProdutoItens.ShowModal;
      Finally
        if frmPesqProdutoItens.ModalResult = mrOk then
        begin
          with frmCompras.cdsCadadastroItens do
          begin
            Edit;
            frmCompras.cdsCadadastroItensID.AsInteger := frmPesqProdutoItens.fdsProdutoItensID.AsInteger;
            frmCompras.cdsCadadastroItensNOME_CADASTRADO.AsString := frmPesqProdutoItens.fdsProdutoItensNOME.AsString;
            frmCompras.cdsCadadastroItensMARGEM_LUCRO.AsFloat := frmPesqProdutoItens.fdsProdutoItensMARGEM_LUCRO.AsFloat;
            Post;
          end;
        end;
        frmPesqProdutoItens.Free
      End;
    end
    else
    begin
      with frmCompras.cdsCadadastroItens do
          begin
            Edit;
            frmCompras.cdsCadadastroItensID.AsInteger := 0;
            frmCompras.cdsCadadastroItensNOME_CADASTRADO.AsString := frmCompras.cdsCadadastroItensNOME.AsString;
            Post;
          end;
    end;

  end;
end;

procedure TfrmItensXMLCompra.gdrCadItensDblClick(Sender: TObject);
begin
  Clipboard.AsText := frmCompras.cdsCadadastroItensEAN.AsString;

  if frmCompras.cdsCadadastroItensENCONTROU.AsString = 'N' then
    frmCompras.cdsCadadastroItens.Edit;
end;

procedure TfrmItensXMLCompra.gdrCadItensDrawColumnCell(Sender: TObject;
  const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
var
    Bitmap : TBitmap;
begin
  if not odd(frmCompras.cdsCadadastroItens.RecNo) then
  begin
    gdrCadItens.Canvas.Brush.Color := DM.gridOddColor;
    gdrCadItens.Canvas.FillRect(Rect);
    gdrCadItens.DefaultDrawDataCell(rect,Column.Field,state);

    if (Column.Index = 4) then
    begin
      if frmCompras.cdsCadadastroItensENCONTROU.AsString = 'N' then
      begin
      if frmCompras.cdsCadadastroItensID.AsInteger = 0 then
        Bitmap := imgCancelLink2.Picture.Bitmap
      else
        Bitmap := imgLink2.Picture.Bitmap;
      end
      else
        Bitmap := imgChequed2.Picture.Bitmap;

      with TDBGrid(Sender) do
      begin
        Canvas.Draw((Rect.Right - Rect.Left - Bitmap.Width) div 2 + Rect.Left,
        (Rect.Bottom - Rect.Top - Bitmap.Height) div 2 + Rect.Top, Bitmap);
        // ou: Canvas.Draw(Rect.Left, Rect.Top, Bitmap);
      end;
    end;
  end
  else
  begin
    if (Column.Index = 4) then
    begin
      if frmCompras.cdsCadadastroItensENCONTROU.AsString = 'N' then
      begin
        if frmCompras.cdsCadadastroItensID.AsInteger = 0 then
          Bitmap := imgCancelLink1.Picture.Bitmap
        else
          Bitmap := imgLink1.Picture.Bitmap;
      end
      else
        Bitmap := imgChequed1.Picture.Bitmap;



      with TDBGrid(Sender) do
      begin
        Canvas.Draw((Rect.Right - Rect.Left - Bitmap.Width) div 2 + Rect.Left,
        (Rect.Bottom - Rect.Top - Bitmap.Height) div 2 + Rect.Top, Bitmap);
        // ou: Canvas.Draw(Rect.Left, Rect.Top, Bitmap);
      end;
    end;
  end;

//  if frmCompras.cdsCadadastroItensSITUACAO_SISTEMA.AsString = 'NÃO ENCONTRADO' then
//    gdrCadItens.Canvas.Font.Color:= clRed;
//
//  if frmCompras.cdsCadadastroItensSITUACAO_SISTEMA.AsString = 'ENCONTRADO' then
//    gdrCadItens.Canvas.Font.Color:= clBlue;
//
//  gdrCadItens.DefaultDrawDataCell(Rect, gdrCadItens.columns[datacol].field, State);

end;

procedure TfrmItensXMLCompra.gdrCadItensMouseMove(Sender: TObject;
  Shift: TShiftState; X, Y: Integer);
var
  pt: TGridcoord;
  MouseScrPt : TPoint;
  OrigActiveRecord : integer;
begin
  pt:= gdrCadItens.MouseCoord(x, y);

  if dgTitles in gdrCadItens.Options    then  Dec(pt.y); //se o titulo é mostrado então ajusta a row index(-1) para nao dar erro de argument out of range
  if dgIndicator in gdrCadItens.Options then  Dec(pt.x); //se o indicador é mostrado então ajusta a column index (-1) para nao dar erro de argument out of range

    if THackGrid(gdrCadItens).DataLink.Active and (pt.y>=0) and (pt.x=4) then
    begin
       gdrCadItens.Cursor:=crHandPoint;
    end
    else
    begin
        gdrCadItens.Cursor:=crDefault;
    end;
end;

end.
