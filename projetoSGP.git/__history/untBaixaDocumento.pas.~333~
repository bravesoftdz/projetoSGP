unit untBaixaDocumento;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, RzCmboBx, RzButton, RzBckgnd, Mask, RzEdit, RzLabel,
  dxGDIPlusClasses, ExtCtrls, JvExExtCtrls, JvImage, RzPanel, DB, FIBDataSet,
  pFIBDataSet, RzDBCmbo, FIBQuery, pFIBQuery, Vcl.Imaging.pngimage, Vcl.Grids,
  Vcl.DBGrids, RzDBGrid, RzTabs, pFIBClientDataSet, Datasnap.DBClient,  Math,
  RzDBEdit;

type
  TfrmBaixaDocumento = class(TForm)
    RzPanel3: TRzPanel;
    RzBackground1: TRzBackground;
    btnReceber: TRzBitBtn;
    btnProrrogar: TRzBitBtn;
    btnCancelar: TRzBitBtn;
    pgcParcelas: TRzPageControl;
    tbsNota: TRzTabSheet;
    gdrNota: TRzDBGrid;
    RzPanel2: TRzPanel;
    RzLabel8: TRzLabel;
    RzLabel6: TRzLabel;
    RzLabel7: TRzLabel;
    RzLabel9: TRzLabel;
    RzLabel10: TRzLabel;
    RzLabel2: TRzLabel;
    RzLabel4: TRzLabel;
    RzLabel5: TRzLabel;
    edtDesconto: TRzEdit;
    edtDinheiro: TRzEdit;
    edtCheque: TRzEdit;
    edtCartao: TRzEdit;
    edtParcelasCH: TRzEdit;
    btnGerarParcelas: TRzBitBtn;
    edtParcelasCT: TRzEdit;
    RzPageControl1: TRzPageControl;
    RzTabSheet2: TRzTabSheet;
    RzDBGrid2: TRzDBGrid;
    edtPrefixoVenda: TRzEdit;
    lblCodigo: TRzLabel;
    RzLabel13: TRzLabel;
    edtIDCliente: TRzEdit;
    edtCliente: TRzEdit;
    lblTipo: TRzLabel;
    btnPesqCliente: TRzBitBtn;
    RzPanel1: TRzPanel;
    JvImage1: TJvImage;
    lblTitulo: TRzLabel;
    lblTituloTotal: TRzLabel;
    edtValorDoc: TRzEdit;
    qryRetornaIDCntReceber_Item: TpFIBQuery;
    qryConsulta: TpFIBQuery;
    dsPortador: TDataSource;
    fdsPortador: TpFIBDataSet;
    fdsPortadorID: TFIBBCDField;
    fdsPortadorDESCRICAO: TFIBStringField;
    qryEditCntReceber_Item: TpFIBQuery;
    qryInsertCntReceber_Item: TpFIBQuery;
    fdsCntReceber: TpFIBDataSet;
    fdsCntReceberID: TFIBBCDField;
    fdsCntReceberDT_INC: TFIBDateField;
    fdsCntReceberDT_ALT: TFIBDateField;
    fdsCntReceberPOSICAO: TFIBStringField;
    fdsCntReceberPREFIXO: TFIBStringField;
    fdsCntReceberREFERENCIA: TFIBStringField;
    fdsCntReceberIDCLIENTE: TFIBBCDField;
    fdsCntReceberACRESCIMO: TFIBBCDField;
    fdsCntReceberDESCONTO: TFIBBCDField;
    fdsCntReceberVALOR: TFIBBCDField;
    fdsCntReceberVALOR_PAGO: TFIBBCDField;
    fdsCntReceberIDPORTADOR: TFIBBCDField;
    fdsCntReceberHISTORICO: TFIBStringField;
    fdsCntReceberIDFORMA_PAG: TFIBBCDField;
    fdsCntReceberIDVENDA: TFIBBCDField;
    fdsCntReceberTIPO_VENDA: TFIBStringField;
    fdsCntReceberTOT_PARCELA: TFIBStringField;
    fdsCntReceberPARCELAS_PG: TFIBIntegerField;
    fdsCntReceberDINHEIRO: TFIBBCDField;
    fdsCntReceberIDFILIAL: TFIBBCDField;
    fdsCntReceberENVIADO_WEB: TFIBStringField;
    cdsChequeCntReceber: TpFIBClientDataSet;
    cdsChequeCntReceberIDBANCO: TpFIBClientBCDField;
    cdsChequeCntReceberAGENCIA: TStringField;
    cdsChequeCntReceberCONTA: TStringField;
    cdsChequeCntReceberNUM_CHEQUE: TStringField;
    cdsChequeCntReceberEMITENTE: TStringField;
    cdsChequeCntReceberVALOR: TpFIBClientBCDField;
    cdsChequeCntReceberDT_VENCIMENTO: TDateField;
    cdsChequeCntReceberPREFIXO: TStringField;
    cdsChequeCntReceberNUM_BANCO: TIntegerField;
    cdsChequeCntReceberPARCELA: TStringField;
    cdsChequeCntReceberIDRECEBER_ITEM: TIntegerField;
    cdsChequeCntReceberIDFILIAL: TIntegerField;
    cdsCntReceber_Item: TpFIBClientDataSet;
    cdsCntReceber_ItemID: TpFIBClientBCDField;
    cdsCntReceber_ItemPOSICAO: TStringField;
    cdsCntReceber_ItemPREFIXO: TStringField;
    cdsCntReceber_ItemREFERENCIA: TStringField;
    cdsCntReceber_ItemDT_VENC: TDateField;
    cdsCntReceber_ItemDT_PAG: TDateField;
    cdsCntReceber_ItemACRESCIMO: TpFIBClientBCDField;
    cdsCntReceber_ItemDESCONTO: TpFIBClientBCDField;
    cdsCntReceber_ItemVALOR: TpFIBClientBCDField;
    cdsCntReceber_ItemVALOR_PAGO: TpFIBClientBCDField;
    cdsCntReceber_ItemHISTORICO: TStringField;
    cdsCntReceber_ItemPARCELA: TStringField;
    cdsCntReceber_ItemIDFILIAL: TIntegerField;
    qryInsertChequeCntReceber: TpFIBQuery;
    qryEditChequeCntReceber_Item: TpFIBQuery;
    dsCntReceber: TDataSource;
    dsChequeCntReceber: TDataSource;
    cdsDocumentos: TpFIBClientDataSet;
    cdsDocumentosIdDoc: TIntegerField;
    cdsDocumentosIdFilial: TIntegerField;
    cdsDocumentosVALOR_PAGO: TFloatField;
    cdsDocumentosREC_DINHEIRO: TFloatField;
    cdsDocumentosVALOR_DOC: TFloatField;
    cdsDocumentosPOSICAO: TStringField;
    cdsDocumentosPAGAMENTO_MOEDA: TStringField;
    cdsDocumentosPARCELA: TStringField;
    cdsDocumentosID_REC_ITEM: TIntegerField;
    cdsDocumentosIDRECEBER: TIntegerField;
    cdsDocumentosDT_VENCIMENTO: TDateField;
    cdsDocumentosVALOR_JUROS: TCurrencyField;
    cdsDocumentosREFERENCIA: TStringField;
    cdsDocumentosIdVenda: TIntegerField;
    fdsReceber_Pagamento: TpFIBDataSet;
    fdsReceber_PagamentoIDCONTA: TFIBBCDField;
    fdsReceber_PagamentoIDPAGAMENTO: TFIBBCDField;
    fdsReceber_PagamentoIDFILIAL: TFIBBCDField;
    cdsRec_Pag: TpFIBClientDataSet;
    cdsRec_PagIDFILIAL: TIntegerField;
    cdsRec_PagIDCONTA: TIntegerField;
    cdsRec_PagIDPAGAMENTO: TIntegerField;
    cdsRec_PagPREFIXO_PAGAMENTO: TStringField;
    edtCredito: TRzEdit;
    RzLabel3: TRzLabel;
    lblVlrCredito: TRzLabel;
    RzLabel1: TRzLabel;
    edtNota: TRzEdit;
    edtParcelasNT: TRzEdit;
    RzLabel11: TRzLabel;
    RzLabel12: TRzLabel;
    edtDescricao: TRzDBEdit;
    RzLabel14: TRzLabel;
    procedure FormKeyPress(Sender: TObject; var Key: Char);
    procedure edtDinheiroEnter(Sender: TObject);
    procedure edtDinheiroExit(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure btnReceberClick(Sender: TObject);
    procedure GeraParcelaCheque(prefixo : string; parcelas: Integer; vlrParcelar: Double);
    procedure GeraParcelaNota(prefixo : string; parcelas: Integer; vlrParcelar: Double);
    procedure BaixarDocumento();
    procedure GerarDocumentos();
    procedure AbateCredtioConta();
    procedure VerificaTipoConta;
    procedure VerificaContaQuitada;
    procedure CalculaValorParcelar;
    procedure GravaConta(valorTotal: Double; parcelasTotal: string; idFormaPag: integer);
    procedure GravaCntReceberItem(prefixo, parcela: string; dtVenc: TDate; valor: Double);
    function RetornaCntReceberItemID(idFilial: Integer; valor: Double; dt_venc: TDate): Integer;
    procedure btnCancelarClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure edtDescontoEnter(Sender: TObject);
    procedure edtDescontoExit(Sender: TObject);
    procedure edtChequeEnter(Sender: TObject);
    procedure edtChequeExit(Sender: TObject);
    procedure edtCartaoEnter(Sender: TObject);
    procedure edtCartaoExit(Sender: TObject);
    procedure btnGerarParcelasClick(Sender: TObject);
    procedure btnPesqClienteClick(Sender: TObject);
    procedure edtValorDocEnter(Sender: TObject);
    procedure edtValorDocExit(Sender: TObject);
    procedure edtCreditoEnter(Sender: TObject);
    procedure edtCreditoExit(Sender: TObject);
    procedure edtNotaEnter(Sender: TObject);
    procedure edtNotaExit(Sender: TObject);
    procedure edtDescricaoKeyPress(Sender: TObject; var Key: Char);
  private
    { Private declarations }
  public
     var
        tipo, modo : string[10]; //tipo = receber ou pagar / modo = inclusão ou pagamento serve para os 2 tipos
        emitente : string;
        valorDoc, valorJuros, valorParcelar, valorDinheiro, valorDesconto  : Double;
        valorCheque, valorCartao, valorCredito, creditoTotal, valorNota : Double;
        idBanco, nBanco, nAgencia, nConta, idReceber, idCliente: Integer;
        gerouParcelas : Boolean;
  end;

var
  frmBaixaDocumento: TfrmBaixaDocumento;

implementation

uses untData, uUtils, untLancDadosBasicCheque, untPesqCliente,
  untPesqFornecedor;

{$R *.dfm}


procedure TfrmBaixaDocumento.AbateCredtioConta;
begin
  if valorCredito> 0 then
  begin
    with qryConsulta do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE CLIENTE C SET C.CREDITO = C.CREDITO - :CREDITO WHERE C.ID = :IDCLIENTE');
      ParamByName('CREDITO').AsFloat := valorCredito;
      ParamByName('IDCLIENTE').AsInteger := idCliente;
      Prepare;
      ExecQuery;
      DM.conexao.CommitRetaining;
    end;
  end;
end;

procedure TfrmBaixaDocumento.BaixarDocumento;
var
  utils: TUtils;
  descontoParcial, dinheiroParcial, cartaoParcial, chequeParcial : Double;
  parcelarParcial, valorPago, valorPagar, valorTotNota, creditoParcial : Double;
  moeda, posicao: string[2];
  foraDesconto: Integer; //Controla a quantidade de notas que possuiem o valor a baixo do desconto ratiado
begin

  valorPago := 0;
  foraDesconto := 0;
  cdsDocumentos.First;
  cdsCntReceber_Item.Last;
  cdsCntReceber_Item.First;
  cdsChequeCntReceber.Last;
  cdsChequeCntReceber.First;

  if valorDesconto > 0 then
    descontoParcial := RoundTo((valorDesconto / cdsDocumentos.RecordCount), -2);

  if valorDinheiro > 0 then     //Distribui o pagamento em DINHEIRO
  begin
    dinheiroParcial := valorDinheiro;

    while not(cdsDocumentos.Eof) do
    begin
      with qryEditCntReceber_Item do
      begin
        Close;

        ParamByName('DT_PAG').AsDateTime := Now;

        valorTotNota := RoundTo(cdsDocumentosVALOR_DOC.AsFloat + cdsDocumentosVALOR_JUROS.AsFloat, -2);
        valorPagar := RoundTo(valorTotNota - descontoParcial - cdsDocumentosVALOR_PAGO.AsFloat, -2);

        if valorPagar < 0 then
        begin
          Inc(foraDesconto);
          valorPagar := RoundTo(valorTotNota - cdsDocumentosVALOR_PAGO.AsFloat, -2);
          descontoParcial := valorPagar;
        end;

        if (dinheiroParcial >= valorPagar) then
        begin
          valorPago := RoundTo(valorTotNota - descontoParcial, -2);
          ParamByName('VALOR_PAGO').AsFloat := valorPago;
          ParamByName('REC_DINHEIRO').AsFloat := RoundTo(cdsDocumentosREC_DINHEIRO.AsFloat + valorPago, -2);
          dinheiroParcial := RoundTo(dinheiroParcial - valorPago + cdsDocumentosVALOR_PAGO.AsFloat, -2);
          ParamByName('POSICAO').AsString := 'PG';
        end
        else
        begin
          valorPago := RoundTo(dinheiroParcial + cdsDocumentosVALOR_PAGO.AsFloat, -2);
          ParamByName('VALOR_PAGO').AsFloat := valorPago;
          ParamByName('REC_DINHEIRO').AsFloat := RoundTo(cdsDocumentosREC_DINHEIRO.AsFloat + dinheiroParcial, -2);
          dinheiroParcial := 0;
          ParamByName('POSICAO').AsString := 'AB';
        end;

        ParamByName('DESCONTO').AsFloat := descontoParcial;

        if (cdsDocumentosPAGAMENTO_MOEDA.AsString <> 'DN') and (cdsDocumentosPAGAMENTO_MOEDA.AsString <> 'AB') then
          moeda := 'RA'
        else
          moeda := 'DN';

        ParamByName('VALOR_JUROS_PAGO').AsFloat := cdsDocumentosVALOR_JUROS.AsFloat;
        ParamByName('PAGAMENTO_MOEDA').AsString := moeda;

        ParamByName('ID').AsInteger := cdsDocumentosIdDoc.AsInteger;
        ParamByName('IDFILIAL').AsInteger := cdsDocumentosIDFILIAL.AsInteger;
        idReceber := cdsDocumentosIDRECEBER.AsInteger;

        with cdsDocumentos do
        begin
          Edit;
          cdsDocumentosVALOR_PAGO.AsFloat := valorPago;
          cdsDocumentosREC_DINHEIRO.AsFloat := ParamByName('REC_DINHEIRO').AsFloat;
          cdsDocumentosPOSICAO.AsString := posicao;
          cdsDocumentosPAGAMENTO_MOEDA.AsString := moeda;
          Post;
        end;

        Prepare;
        ExecQuery;

        VerificaContaQuitada;

        if valorPago = 0 then
        begin
          descontoParcial := RoundTo(((valorDesconto - valorPagar) / (cdsDocumentos.RecordCount - foraDesconto)), -2);
        end;

      end;

      if dinheiroParcial <= 0 then
      begin
        Break;
      end
      else
        cdsDocumentos.Next;

    end;
  end;

  cdsDocumentos.First;

  if valorCredito > 0 then     //Distribui o pagamento em CREDITO
  begin
    creditoParcial := valorCredito;

    while not(cdsDocumentos.Eof) do
    begin
      with qryEditCntReceber_Item do
      begin
        Close;

        ParamByName('DT_PAG').AsDateTime := Now;

        valorTotNota := RoundTo(cdsDocumentosVALOR_DOC.AsFloat + cdsDocumentosVALOR_JUROS.AsFloat, -2);
        valorPagar := RoundTo(valorTotNota - descontoParcial - cdsDocumentosVALOR_PAGO.AsFloat, -2);

        if valorPagar < 0 then
        begin
          Inc(foraDesconto);
          valorPagar := RoundTo(valorTotNota - cdsDocumentosVALOR_PAGO.AsFloat, -2);
          descontoParcial := valorPagar;
        end;

        if (creditoParcial >= valorPagar) then
        begin
          valorPago := RoundTo(valorTotNota - descontoParcial, -2);
          ParamByName('VALOR_PAGO').AsFloat := valorPago;
          creditoParcial := RoundTo(creditoParcial - valorPagar + cdsDocumentosVALOR_PAGO.AsFloat, -2);
          ParamByName('POSICAO').AsString := 'PG';
        end
        else
        begin
          valorPago := RoundTo(creditoParcial + cdsDocumentosVALOR_PAGO.AsFloat, -2);
          ParamByName('VALOR_PAGO').AsFloat := valorPago;
          creditoParcial := 0;
          ParamByName('POSICAO').AsString := 'AB';
        end;

        ParamByName('DESCONTO').AsFloat := descontoParcial;

        if (cdsDocumentosPAGAMENTO_MOEDA.AsString <> 'CR') and (cdsDocumentosPAGAMENTO_MOEDA.AsString <> 'AB') then
          moeda := 'RA'
        else
          moeda := 'CR';

        ParamByName('VALOR_JUROS_PAGO').AsFloat := cdsDocumentosVALOR_JUROS.AsFloat;
        ParamByName('PAGAMENTO_MOEDA').AsString := moeda;
        ParamByName('REC_DINHEIRO').AsFloat := cdsDocumentosREC_DINHEIRO.AsFloat;

        ParamByName('ID').AsInteger := cdsDocumentosIdDoc.AsInteger;
        ParamByName('IDFILIAL').AsInteger := cdsDocumentosIDFILIAL.AsInteger;
        idReceber := cdsDocumentosIDRECEBER.AsInteger;

        with cdsDocumentos do
        begin
          Edit;
          cdsDocumentosVALOR_PAGO.AsFloat := valorPago;
          cdsDocumentosPOSICAO.AsString := posicao;
          cdsDocumentosPAGAMENTO_MOEDA.AsString := moeda;
          Post;
        end;

        with cdsRec_Pag do
        begin
          Append;
          cdsRec_PagPREFIXO_PAGAMENTO.AsString := 'CR';
          cdsRec_PagIDCONTA.AsInteger := cdsDocumentosIdDoc.AsInteger;
          cdsRec_PagIDFILIAL.AsInteger := cdsDocumentosIDFILIAL.AsInteger;
          Post;
        end;

        Prepare;
        ExecQuery;

        VerificaContaQuitada;

        if valorPago = 0 then
        begin
          descontoParcial := RoundTo(((valorDesconto - valorPagar) / (cdsDocumentos.RecordCount - foraDesconto)), -2);
        end;

      end;

      if creditoParcial <= 0 then
      begin
        Break;
      end
      else
        cdsDocumentos.Next;

    end;
  end;

  cdsDocumentos.First;

  if valorCartao > 0 then //Distribui o pagamento em CARTÃO
  begin
    cartaoParcial := valorCartao;

    while not(cdsDocumentos.Eof) do
    begin
      if cdsDocumentosPOSICAO.AsString <> 'PG' then
      begin
        with qryEditCntReceber_Item do
        begin
          Close;

          ParamByName('DT_PAG').AsDateTime := Now;

          valorTotNota := RoundTo(cdsDocumentosVALOR_DOC.AsFloat + cdsDocumentosVALOR_JUROS.AsFloat, -2);
          valorPagar := RoundTo(valorTotNota - descontoParcial - cdsDocumentosVALOR_PAGO.AsFloat, -2);

          if valorPagar < 0 then
          begin
            Inc(foraDesconto);
            valorPagar := RoundTo(valorTotNota - cdsDocumentosVALOR_PAGO.AsFloat, -2);
            descontoParcial := valorPagar;
          end;

          if (cartaoParcial >= valorPagar) then
          begin
            valorPago := RoundTo(valorTotNota - descontoParcial, -2);
            ParamByName('VALOR_PAGO').AsFloat := valorPago;
            cartaoParcial := RoundTo(cartaoParcial - valorPagar + cdsDocumentosVALOR_PAGO.AsFloat, -2);
            ParamByName('POSICAO').AsString := 'PG';
          end
          else
          begin
            valorPago := RoundTo(cartaoParcial + cdsDocumentosVALOR_PAGO.AsFloat, -2);
            ParamByName('VALOR_PAGO').AsFloat := valorPago;
            cartaoParcial := 0;
            ParamByName('POSICAO').AsString := 'AB';
          end;

          ParamByName('DESCONTO').AsFloat := descontoParcial;

          if (cdsDocumentosPAGAMENTO_MOEDA.AsString <> 'CT') and (cdsDocumentosPAGAMENTO_MOEDA.AsString <> 'AB') then
            moeda := 'RA'
          else
            moeda := 'CT';

          ParamByName('VALOR_JUROS_PAGO').AsFloat := cdsDocumentosVALOR_JUROS.AsFloat;
          ParamByName('PAGAMENTO_MOEDA').AsString := moeda;

          ParamByName('REC_DINHEIRO').AsFloat := cdsDocumentosREC_DINHEIRO.AsFloat;

          ParamByName('ID').AsInteger := cdsDocumentosIdDoc.AsInteger;
          ParamByName('IDFILIAL').AsInteger := cdsDocumentosIDFILIAL.AsInteger;
          idreceber := cdsDocumentosIDRECEBER.AsInteger;

          with cdsDocumentos do
          begin
            Edit;
            cdsDocumentosVALOR_PAGO.AsFloat := valorPago;
            cdsDocumentosPOSICAO.AsString := posicao;
            cdsDocumentosPAGAMENTO_MOEDA.AsString := moeda;
            Post;
          end;

          with cdsRec_Pag do
          begin
            Append;
            cdsRec_PagPREFIXO_PAGAMENTO.AsString := 'CT';
            cdsRec_PagIDCONTA.AsInteger := cdsDocumentosIdDoc.AsInteger;
            cdsRec_PagIDFILIAL.AsInteger := cdsDocumentosIDFILIAL.AsInteger;
            Post;
          end;

          Prepare;
          ExecQuery;

          VerificaContaQuitada;

          if valorPago = 0 then
          begin
            descontoParcial := RoundTo(((valorDesconto - valorPagar) / (cdsDocumentos.RecordCount - foraDesconto)), -2);
          end;

        end;
      end;

      if cartaoParcial <= 0 then
      begin
        Break;
      end
      else
        cdsDocumentos.Next;

    end;
  end;

  cdsDocumentos.First;

  if valorCheque > 0 then //Distribui o pagamento em CHEQUE
  begin
    chequeParcial := valorCheque;

    while not(cdsDocumentos.Eof) do
    begin
      if cdsDocumentosPOSICAO.AsString <> 'PG' then
      begin
        with qryEditCntReceber_Item do
        begin
          Close;

          ParamByName('DT_PAG').AsDateTime := Now;

          valorTotNota := RoundTo(cdsDocumentosVALOR_DOC.AsFloat + cdsDocumentosVALOR_JUROS.AsFloat, -2);
          valorPagar := RoundTo(valorTotNota - descontoParcial - cdsDocumentosVALOR_PAGO.AsFloat, -2);

          if valorPagar < 0 then
          begin
            Inc(foraDesconto);
            valorPagar := RoundTo(valorTotNota - cdsDocumentosVALOR_PAGO.AsFloat, -2);
            descontoParcial := valorPagar;
          end;

          if (chequeParcial >= valorPagar) then
          begin
            valorPago := RoundTo(valorTotNota - descontoParcial, -2);
            ParamByName('VALOR_PAGO').AsFloat := valorPago;
            chequeParcial := RoundTo(chequeParcial - valorPagar + cdsDocumentosVALOR_PAGO.AsFloat, -2);
            ParamByName('POSICAO').AsString := 'PG';
          end
          else
          begin
            valorPago := RoundTo(chequeParcial + cdsDocumentosVALOR_PAGO.AsFloat, -2);
            ParamByName('VALOR_PAGO').AsFloat := valorPago;
            chequeParcial := 0;
            ParamByName('POSICAO').AsString := 'AB';
          end;

          ParamByName('DESCONTO').AsFloat := descontoParcial;

          if (cdsDocumentosPAGAMENTO_MOEDA.AsString <> 'CH') and (cdsDocumentosPAGAMENTO_MOEDA.AsString <> 'AB') then
            moeda := 'RA'
          else
            moeda := 'CH';

          ParamByName('VALOR_JUROS_PAGO').AsFloat := cdsDocumentosVALOR_JUROS.AsFloat;
          ParamByName('PAGAMENTO_MOEDA').AsString := moeda;

          ParamByName('REC_DINHEIRO').AsFloat := cdsDocumentosREC_DINHEIRO.AsFloat;

          ParamByName('ID').AsInteger := cdsDocumentosIdDoc.AsInteger;
          ParamByName('IDFILIAL').AsInteger := cdsDocumentosIDFILIAL.AsInteger;
          idReceber := cdsDocumentosIDRECEBER.AsInteger;

          with cdsDocumentos do
          begin
            Edit;
            cdsDocumentosVALOR_PAGO.AsFloat := valorPago;
            cdsDocumentosPOSICAO.AsString := posicao;
            cdsDocumentosPAGAMENTO_MOEDA.AsString := moeda;
            Post;
          end;

          with cdsRec_Pag do
          begin
            Append;
            cdsRec_PagPREFIXO_PAGAMENTO.AsString := 'CH';
            cdsRec_PagIDCONTA.AsInteger := cdsDocumentosIdDoc.AsInteger;
            cdsRec_PagIDFILIAL.AsInteger := cdsDocumentosIDFILIAL.AsInteger;
            Post;
          end;

          Prepare;
          ExecQuery;

          VerificaContaQuitada;

          if valorPago = 0 then
          begin
            descontoParcial := RoundTo(((valorDesconto - valorPagar) / (cdsDocumentos.RecordCount - foraDesconto)), -2);
          end;

        end;
      end;

      if chequeParcial <= 0 then
      begin
        Break;
      end
      else
        cdsDocumentos.Next;

    end;
  end;

  //cdsDocumentos.First;

//  if valorParcelar > 0 then //Distribui o pagamento em NOTA
//  begin
//    parcelarParcial := valorParcelar;
//
//    while not(cdsDocumentos.Eof) do
//    begin
//      if cdsDocumentosPOSICAO.AsString <> 'PG' then
//      begin
//        with qryEditCntReceber_Item do
//        begin
//          Close;
//
//          ParamByName('DT_PAG').AsDateTime := Now;
//
//          if (parcelarParcial >= cdsDocumentosVALOR_DOC.AsFloat - cdsDocumentosVALOR_PAGO.AsFloat) then
//          begin
//            ParamByName('VALOR_PAGO').AsFloat := cdsDocumentosVALOR_DOC.AsFloat;
//            parcelarParcial := parcelarParcial - (cdsDocumentosVALOR_DOC.AsFloat - cdsDocumentosVALOR_PAGO.AsFloat);
//          end
//          else
//          begin
//            ParamByName('VALOR_PAGO').AsFloat := parcelarParcial + cdsDocumentosVALOR_PAGO.AsFloat;
//            parcelarParcial := 0;
//          end;
//
//          if (ParamByName('VALOR_PAGO').AsFloat = cdsDocumentosVALOR_DOC.AsFloat) then
//            posicao := 'PG'
//          else
//            posicao := 'AB';
//
//          if (cdsDocumentosPAGAMENTO_MOEDA.AsString <> 'TR') and (cdsDocumentosPAGAMENTO_MOEDA.AsString <> 'AB') then
//            moeda := 'RA'
//          else
//            moeda := 'TR';
//
//          ParamByName('PAGAMENTO_MOEDA').AsString := moeda;
//          ParamByName('POSICAO').AsString := posicao;
//
//          ParamByName('REC_DINHEIRO').AsFloat := cdsDocumentosREC_DINHEIRO.AsFloat;
//          ParamByName('REC_DESC_ACRE').AsFloat := des_acreParcial;
//
//          ParamByName('ID').AsInteger := cdsDocumentosIdDoc.AsInteger;
//          ParamByName('IDFILIAL').AsInteger := cdsDocumentosIDFILIAL.AsInteger;
//
//          with cdsDocumentos do
//          begin
//            Edit;
//            cdsDocumentosVALOR_PAGO.AsFloat := ParamByName('VALOR_PAGO').AsFloat;
//            cdsDocumentosPOSICAO.AsString := posicao;
//            cdsDocumentosPAGAMENTO_MOEDA.AsString := moeda;
//            Post;
//          end;

//            with cdsRec_Pag do
//            begin
//              Append;
//            //  cdsRec_PagPREFIXO_PAGAMENTO.AsString := 'CH';
//              cdsRec_PagIDRECEBER.AsInteger := cdsDocumentosIdDoc.AsInteger;
//              cdsRec_PagIDFILIAL.AsInteger := cdsDocumentosIDFILIAL.AsInteger;
//              Post;
//            end;
//
//          Prepare;
//          ExecQuery;
//
//        end;
//      end;
//
//      if parcelarParcial <= 0 then
//      begin
//        Break;
//      end
//      else
//        cdsDocumentos.Next;
//
//    end;
//  end;
  DM.Conexao.CommitRetaining;
end;

procedure TfrmBaixaDocumento.btnCancelarClick(Sender: TObject);
begin
  ModalResult := mrCancel;
end;

procedure TfrmBaixaDocumento.btnGerarParcelasClick(Sender: TObject);
var
  parcelas : Integer;
  utils : TUtils;
begin

  cdsCntReceber_Item.EmptyDataSet;
  cdsChequeCntReceber.EmptyDataSet;
  parcelas := 0;

  if valorCheque > 0 then
  begin
    Try
      frmLancDadosBasicCheque := TfrmLancDadosBasicCheque.Create(nil);
      frmLancDadosBasicCheque.edtEmitente.Text := emitente;
      frmLancDadosBasicCheque.ShowModal;
    Finally
      if frmLancDadosBasicCheque.ModalResult = mrOk then
      begin
        idBanco := frmLancDadosBasicCheque.idBanco;
        nBanco := frmLancDadosBasicCheque.fdsBancoNUM_BANCO.AsInteger;
        emitente := frmLancDadosBasicCheque.edtEmitente.Text;
        nAgencia := StrToInt(frmLancDadosBasicCheque.edtAgencia.Text);
        nConta := StrToInt(frmLancDadosBasicCheque.edtConta.Text);
        parcelas := StrToInt(edtParcelasCH.Text);
        GeraParcelaCheque('CH', parcelas, valorCheque);
      end;
      frmLancDadosBasicCheque.Free;
    End;
  end;

  parcelas := 0;

  if valorCartao > 0 then
  begin
    parcelas := StrToInt(edtParcelasCT.Text);
    GeraParcelaNota('CT', parcelas, valorCartao);
  end;

  parcelas := 0;

  if valorNota > 0 then
  begin
    parcelas := StrToInt(edtParcelasNT.Text);
    GeraParcelaNota('NT', parcelas, valorNota);
  end;

  gerouParcelas := True;
  btnReceber.SetFocus;
end;

procedure TfrmBaixaDocumento.btnPesqClienteClick(Sender: TObject);
begin
  if tipo = 'Receber' then
  begin
    Try
    frmPesqCliente := TfrmPesqCliente.Create(nil);
    frmPesqCliente.ShowModal;
  Finally
    if frmPesqCliente.ModalResult = mrOk then
    begin
      idCliente := frmPesqCliente.fdsClientesID.AsInteger;
      edtCliente.Text := frmPesqCliente.fdsClientesNOME.AsString;
      edtDescricao.SetFocus;
    end;
    frmPesqCliente.Free;
  End;
  end
  else
  begin
    Try
      frmPesqFornecedor := TfrmPesqFornecedor.Create(nil);
      frmPesqFornecedor.ShowModal;
    Finally
      if frmPesqFornecedor.ModalResult = mrOk then
      begin
        idCliente := frmPesqFornecedor.fdsFornecedorID.AsInteger;
        edtCliente.Text := frmPesqFornecedor.fdsFornecedorNOME.AsString;
        edtDescricao.SetFocus;
      end;
      frmPesqFornecedor.Free;
    End;
  end;
end;

procedure TfrmBaixaDocumento.btnReceberClick(Sender: TObject);
begin
  if ((valorCheque > 0) or (valorParcelar > 0)) and ((idCliente = DM.fdsConfigIDCLIENTEPADRAO.AsInteger) or (idCliente = 0)) then
  begin
    Application.MessageBox('Informe um cliente para parcelar a conta ou informe outra modea para a venda.', 'Atenção', MB_OK+MB_ICONEXCLAMATION);
    btnPesqCliente.SetFocus;
    Abort;
  end;

  if (modo = 'Pagamento') then
  begin
    if (valorDinheiro = 0) and (valorCheque = 0) and (valorCartao = 0) and (valorCredito = 0) then
    begin
      Application.MessageBox('Informe o valor de pagamento em uma das moedas.', 'Atenção', MB_OK+MB_ICONEXCLAMATION);
      edtDinheiro.SetFocus;
      Abort;
    end;
  end
  else
  begin
    if ((valorCheque > 0) or (valorParcelar > 0) or (valorCartao > 0)) and (gerouParcelas = False) then
    begin
      Application.MessageBox('Primeiro gere as parcelas a receber.', 'Atenção', MB_OK+MB_ICONEXCLAMATION);
      btnGerarParcelas.SetFocus;
      Abort;
    end;
  end;

  cdsChequeCntReceber.First;
  if cdsChequeCntReceber.RecordCount > 0 then
  begin
    while not(cdsChequeCntReceber.Eof) do
    begin
      if Trim(cdsChequeCntReceberNUM_CHEQUE.AsString) = '' then
          begin
            Application.MessageBox('Você deve preencher o nº de todos os cheques.', 'Atenção', MB_OK+MB_ICONEXCLAMATION);
            Abort;
          end
          else
            cdsChequeCntReceber.Next;
    end;
  end;

  if (modo = 'Pagamento') then
    BaixarDocumento;

  GerarDocumentos;
  AbateCredtioConta;

  if (modo = 'Pagamento') then
    Application.MessageBox('Documento Baixado Com Sucesso!','Confirmação de Baixa', MB_OK+MB_ICONEXCLAMATION);

  ModalResult := mrOk;
end;

procedure TfrmBaixaDocumento.CalculaValorParcelar;
var
  utils : TUtils;
begin
  if (modo = 'Inclusão') then
  begin

    valorNota := RoundTo(valorDoc - valorDesconto - valorDinheiro - valorCheque - valorCartao, -2);

    if valorNota < 0 then
      valorNota := 0;

    edtNota.Text := utils.AdicionaMascaraDinheiro(FloatToStr(valorNota));
    gerouParcelas := False;
  end;
end;

procedure TfrmBaixaDocumento.edtCartaoEnter(Sender: TObject);
var
  utils : TUtils;
begin
  edtCartao.Text := utils.RetiraMascaraDinheiro(edtCartao.Text);
  edtCartao.SelectAll;
end;

procedure TfrmBaixaDocumento.edtCartaoExit(Sender: TObject);
var
  utils : TUtils;
begin
  edtCartao.Text := FloatToStr(utils.ValidaInteiroFloat(edtCartao.Text, 'F'));
  valorCartao :=  StrToFloat(edtCartao.Text);
  edtCartao.Text := utils.AdicionaMascaraDinheiro(edtCartao.Text);
  CalculaValorParcelar;
end;

procedure TfrmBaixaDocumento.edtChequeEnter(Sender: TObject);
var
  utils : TUtils;
begin
  edtCheque.Text := utils.RetiraMascaraDinheiro(edtCheque.Text);
  edtCheque.SelectAll;
end;

procedure TfrmBaixaDocumento.edtChequeExit(Sender: TObject);
var
  utils : TUtils;
begin
  edtCheque.Text := FloatToStr(utils.ValidaInteiroFloat(edtCheque.Text, 'F'));
  valorCheque :=  StrToFloat(edtCheque.Text);
  edtCheque.Text := utils.AdicionaMascaraDinheiro(edtCheque.Text);
  CalculaValorParcelar;
end;

procedure TfrmBaixaDocumento.edtCreditoEnter(Sender: TObject);
var
  utils : TUtils;
begin
  edtCredito.Text := utils.RetiraMascaraDinheiro(edtCredito.Text);
  edtCredito.SelectAll;
end;

procedure TfrmBaixaDocumento.edtCreditoExit(Sender: TObject);
var
  utils : TUtils;
begin
  edtCredito.Text := FloatToStr(utils.ValidaInteiroFloat(edtCredito.Text, 'F'));
  valorCredito :=  StrToFloat(edtCredito.Text);

  if valorCredito > creditoTotal then
  begin
    Application.MessageBox('Crédito informado é maior que o crédito em conta do cliente.', 'Atenção', MB_OK+MB_ICONINFORMATION);
    valorCredito := creditoTotal;
    edtCredito.Text := FloatToStr(valorCredito);
    edtCredito.SetFocus;
  end
  else
    edtCredito.Text := utils.AdicionaMascaraDinheiro(edtCredito.Text);
end;

procedure TfrmBaixaDocumento.edtDescontoEnter(Sender: TObject);
var
  utils : TUtils;
begin
  edtDesconto.Text := utils.RetiraMascaraDinheiro(edtDesconto.Text);
  edtDesconto.SelectAll;
end;

procedure TfrmBaixaDocumento.edtDescontoExit(Sender: TObject);
var
  utils : TUtils;
begin
  edtDesconto.Text := FloatToStr(utils.ValidaInteiroFloat(edtDesconto.Text, 'F'));
  valorDesconto :=  StrToFloat(edtDesconto.Text);
  edtDesconto.Text := utils.AdicionaMascaraDinheiro(edtDesconto.Text);

  if valorDesconto > 0 then
  begin
    valorDinheiro :=  RoundTo(valorDoc - valorDesconto, -2);
    edtDinheiro.Text := utils.AdicionaMascaraDinheiro(FloatToStr(valorDinheiro));
  end;

  CalculaValorParcelar;
end;

procedure TfrmBaixaDocumento.edtDescricaoKeyPress(Sender: TObject;
  var Key: Char);
begin
  if Key = #13 then
  begin
    Key := #0;
    edtDesconto.SetFocus;
  end;
end;

procedure TfrmBaixaDocumento.edtDinheiroEnter(Sender: TObject);
var
  utils : TUtils;
begin
  edtDinheiro.Text := utils.RetiraMascaraDinheiro(edtDinheiro.Text);
  edtDinheiro.SelectAll;
end;

procedure TfrmBaixaDocumento.edtDinheiroExit(Sender: TObject);
var
  utils : TUtils;
begin
  edtDinheiro.Text := FloatToStr(utils.ValidaInteiroFloat(edtDinheiro.Text, 'F'));
  valorDinheiro :=  StrToFloat(edtDinheiro.Text);
  edtDinheiro.Text := utils.AdicionaMascaraDinheiro(edtDinheiro.Text);
  CalculaValorParcelar;
end;

procedure TfrmBaixaDocumento.edtNotaEnter(Sender: TObject);
var
  utils : TUtils;
begin
  edtNota.Text := utils.RetiraMascaraDinheiro(edtNota.Text);
  edtNota.SelectAll;
end;

procedure TfrmBaixaDocumento.edtNotaExit(Sender: TObject);
var
  utils : TUtils;
begin
  edtNota.Text := FloatToStr(utils.ValidaInteiroFloat(edtNota.Text, 'F'));
  valorNota :=  StrToFloat(edtNota.Text);
  edtNota.Text := utils.AdicionaMascaraDinheiro(edtNota.Text);
end;

procedure TfrmBaixaDocumento.edtValorDocEnter(Sender: TObject);
var
  utils : TUtils;
begin
  if edtValorDoc.ReadOnly = False then
  begin
    edtValorDoc.Text := utils.RetiraMascaraDinheiro(edtValorDoc.Text);
    edtValorDoc.SelectAll;
  end;
end;

procedure TfrmBaixaDocumento.edtValorDocExit(Sender: TObject);
var
  utils : TUtils;
begin
  if (modo = 'Inclusão') then
  begin
    edtValorDoc.Text := FloatToStr(utils.ValidaInteiroFloat(edtValorDoc.Text, 'F'));
    valorDoc :=  StrToFloat(edtValorDoc.Text);

    if (valorDoc <= 0) then
    begin
      Application.MessageBox('Informe um valor para o Documento.', 'Atenção', MB_OK+MB_ICONEXCLAMATION);
      edtValorDoc.SetFocus;
      Abort;
    end;

    edtValorDoc.Text := utils.AdicionaMascaraDinheiro(edtValorDoc.Text);
    btnPesqCliente.SetFocus;
    CalculaValorParcelar;
  end;
end;

procedure TfrmBaixaDocumento.FormActivate(Sender: TObject);
var
  utils : TUtils;
begin
  edtValorDoc.Text := utils.AdicionaMascaraDinheiro(FloatToStr(valorDoc));
 // edtJurosTotal.Text := utils.AdicionaMascaraDinheiro(FloatToStr(valorJuros));
  edtDesconto.SetFocus;
  fdsPortador.Open;
  fdsPortador.Last;
  fdsPortador.First;

  valorDinheiro := 0;
  valorDesconto := 0;
  valorCheque := 0;
  valorCartao:= 0;

  if creditoTotal > 0 then
  begin
    lblVlrCredito.Visible := True;
    lblVlrCredito.Caption := 'Crédito: ' + FormatFloat('R$ #,##0.00', creditoTotal);
  end;

  if tipo = 'Receber' then
  begin
    frmBaixaDocumento.Caption := 'Baixa de Documentos - Contas a Receber';
  end;

  if (modo = 'Inclusão') then
  begin
    btnPesqCliente.Enabled := True;
    edtValorDoc.ReadOnly := False;
    btnReceber.Caption := '&Finalizar';
    edtNota.Enabled := True;
    edtParcelasNT.Enabled := True;
    edtCredito.Enabled := False;
    edtDescricao.Enabled := True;
    edtValorDoc.SetFocus;
  end;


end;

procedure TfrmBaixaDocumento.FormCreate(Sender: TObject);
begin
  cdsDocumentos.CreateDataSet;
  cdsDocumentos.Open;

  cdsCntReceber_Item.CreateDataSet;
  cdsCntReceber_Item.Open;

  cdsChequeCntReceber.CreateDataSet;
  cdsChequeCntReceber.Open;

  cdsRec_Pag.CreateDataSet;
  cdsRec_Pag.Open;

  fdsReceber_Pagamento.Open;
end;

procedure TfrmBaixaDocumento.FormKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then
  begin
    Key := #0;
    SelectNext(ActiveControl, True, True);
  end;
end;

procedure TfrmBaixaDocumento.GeraParcelaCheque(prefixo: string;
  parcelas: Integer; vlrParcelar: Double);
var
  i : integer;
  parcelasTemp : string[3];
  valorParcela : Double;
  dataParcela : TDateTime;
  utils: TUtils;
begin
  i := 1;

  parcelasTemp := utils.FormataParcelas(IntToStr(parcelas));

  valorParcela := vlrParcelar / parcelas;

  valorParcela := RoundTo(valorParcela, -2);

  dataParcela := Now;

  for i := 1 to parcelas do
  begin
    cdsChequeCntReceber.Append;
    cdsChequeCntReceberIDFILIAL.AsInteger := DM.fdsConfigIDFILIAL.AsInteger;
    cdsChequeCntReceberEMITENTE.AsString := emitente;
    cdsChequeCntReceberIDBANCO.AsInteger := idBanco;
    cdsChequeCntReceberAGENCIA.AsInteger := nAgencia;
    cdsChequeCntReceberCONTA.AsInteger := nConta;
    cdsChequeCntReceberNUM_BANCO.AsInteger := nBanco;
    dataParcela := dataParcela + 30;
    cdsChequeCntReceberDT_VENCIMENTO.AsDateTime := dataParcela;
    cdsChequeCntReceberPARCELA.AsString:= utils.FormataParcelas(IntToStr(i)) + parcelasTemp;

      if i = parcelas then
      valorParcela := valorParcela + (vlrParcelar - (valorParcela * parcelas)); //joga os centavos faltando para a última parcela. Devido ao arredondamento
    cdsChequeCntReceberVALOR.AsFloat := valorParcela;

    cdsChequeCntReceber.Post;

  end;
end;

procedure TfrmBaixaDocumento.GeraParcelaNota(prefixo: string; parcelas: Integer;
  vlrParcelar: Double);
var
  i : integer;
  parcelasTemp : string[3];
  valorParcela : Double;
  dataParcela : TDateTime;
  utils: TUtils;
begin
  i := 1;

  parcelasTemp := utils.FormataParcelas(IntToStr(parcelas));

  valorParcela := vlrParcelar / parcelas;

  valorParcela := RoundTo(valorParcela, -2);

  dataParcela := Now;

  for i := 1 to parcelas do
  begin
    cdsCntReceber_Item.Append;
    cdsCntReceber_ItemIDFILIAL.AsInteger := DM.fdsConfigIDFILIAL.AsInteger;
    cdsCntReceber_ItemPOSICAO.AsString := 'AB';
    cdsCntReceber_ItemPARCELA.AsString:= utils.FormataParcelas(IntToStr(i)) + parcelasTemp;
    cdsCntReceber_ItemPREFIXO.AsString := prefixo;
    dataParcela := dataParcela + 30;
    cdsCntReceber_ItemDT_VENC.AsDateTime := dataParcela;

    if i = parcelas then
      valorParcela := valorParcela + (vlrParcelar - (valorParcela * parcelas)); //joga os centavos faltando para a última parcela. Devido ao arredondamento
    cdsCntReceber_ItemVALOR.AsFloat := valorParcela;

    cdsCntReceber_Item.Post;
  end;
end;

procedure TfrmBaixaDocumento.GerarDocumentos;
var
   prefixoTemp : string[2];
   idReceberItem: Integer;
begin

  cdsChequeCntReceber.First;

  if cdsChequeCntReceber.RecordCount > 0 then
  begin
    GravaCntReceber(valorCheque, edtParcelasCH.Text, 4);

    while not(cdsChequeCntReceber.Eof) do
    begin
      GravaCntReceberItem('CH', cdsChequeCntReceberPARCELA.AsString, cdsChequeCntReceberDT_VENCIMENTO.AsDateTime, cdsChequeCntReceberVALOR.AsFloat);
      idReceberItem := RetornaCntReceberItemID(cdsChequeCntReceberIDFILIAL.AsInteger, cdsChequeCntReceberVALOR.AsFloat, cdsChequeCntReceberDT_VENCIMENTO.AsDateTime);

      qryInsertChequeCntReceber.Close;
      qryInsertChequeCntReceber.ParamByName('IDRECEBER_ITEM').AsString := IntToStr(idReceberItem);
      qryInsertChequeCntReceber.ParamByName('IDFILIAL').AsInteger := cdsChequeCntReceberIDFILIAL.AsInteger;
      qryInsertChequeCntReceber.ParamByName('IDBANCO').AsString := IntToStr(idBanco);
      qryInsertChequeCntReceber.ParamByName('AGENCIA').AsString := IntToStr(nAgencia);
      qryInsertChequeCntReceber.ParamByName('CONTA').AsString := IntToStr(nConta);
      qryInsertChequeCntReceber.ParamByName('NUM_CHEQUE').AsString := cdsChequeCntReceberNUM_CHEQUE.AsString;
      qryInsertChequeCntReceber.ParamByName('DT_EMISSAO').AsDateTime := Now;
      qryInsertChequeCntReceber.ParamByName('EMITENTE').AsString := cdsChequeCntReceberEMITENTE.AsString;
      qryInsertChequeCntReceber.ParamByName('VALOR').AsFloat := cdsChequeCntReceberVALOR.AsFloat;
      qryInsertChequeCntReceber.ParamByName('DT_VENCIMENTO').AsDateTime := cdsChequeCntReceberDT_VENCIMENTO.AsDateTime;
      qryInsertChequeCntReceber.Prepare;
      qryInsertChequeCntReceber.ExecQuery;

      cdsChequeCntReceber.Next;
    end;

    cdsRec_Pag.First;

    while not(cdsRec_Pag.Eof) do
    begin
      if cdsRec_PagPREFIXO_PAGAMENTO.AsString = 'CH' then          //vitor
      begin
        fdsReceber_Pagamento.Append;
        fdsReceber_PagamentoIDCONTA.AsInteger := cdsRec_PagIDCONTA.AsInteger;
        fdsReceber_PagamentoIDPAGAMENTO.AsInteger := idReceber;
        fdsReceber_PagamentoIDFILIAL.AsInteger := cdsRec_PagIDFILIAL.AsInteger;
        fdsReceber_Pagamento.Post;
      end;
      cdsRec_Pag.Next;
    end;

    DM.Conexao.CommitRetaining;
  end;

  cdsCntReceber_Item.First;
  prefixoTemp := cdsCntReceber_ItemPREFIXO.AsString;

  while not(cdsCntReceber_Item.Eof) do
  Begin
    if prefixoTemp = 'CT' then
    begin
      GravaCntReceber(valorCartao, edtParcelasCT.Text, 2);

      while (prefixoTemp = 'CT') and not(cdsCntReceber_Item.Eof) do
      begin
        GravaCntReceberItem(prefixoTemp, cdsCntReceber_ItemPARCELA.AsString, cdsCntReceber_ItemDT_VENC.AsDateTime, cdsCntReceber_ItemVALOR.AsFloat);
        cdsCntReceber_Item.Next;
        prefixoTemp := cdsCntReceber_ItemPREFIXO.AsString;
      end;
    end;

    if (prefixoTemp = 'NT') then
    begin
      GravaCntReceber(valorNota, edtParcelasNT.Text, 6);

      while (prefixoTemp = 'NT') and not(cdsCntReceber_Item.Eof)  do
      begin
        GravaCntReceberItem(prefixoTemp, cdsCntReceber_ItemPARCELA.AsString, cdsCntReceber_ItemDT_VENC.AsDateTime, cdsCntReceber_ItemVALOR.AsFloat);
        cdsCntReceber_Item.Next;
        prefixoTemp := cdsCntReceber_ItemPREFIXO.AsString;
      end;
//
    end;

    cdsRec_Pag.First;

    while not(cdsRec_Pag.Eof) do
    begin
      if cdsRec_PagPREFIXO_PAGAMENTO.AsString = prefixoTemp then
      begin
        fdsReceber_Pagamento.Append;
        fdsReceber_PagamentoIDCONTA.AsInteger := cdsRec_PagIDCONTA.AsInteger;
        fdsReceber_PagamentoIDPAGAMENTO.AsInteger := idReceber;
        fdsReceber_PagamentoIDFILIAL.AsInteger := cdsRec_PagIDFILIAL.AsInteger;
        fdsReceber_Pagamento.Post;
      end;
      cdsRec_Pag.Next;
    end;

    DM.Conexao.CommitRetaining;

  End;
end;

procedure TfrmBaixaDocumento.GravaConta(valorTotal: Double;
  parcelasTotal: string; idFormaPag: integer);
var
  utils: TUtils;
begin
  fdsCntReceber.Open;
  fdsCntReceber.Append;
  idReceber := fdsCntReceberID.AsInteger;
  fdsCntReceberIDFILIAL.AsInteger := DM.fdsConfigIDFILIAL.AsInteger;
  fdsCntReceberDT_INC.AsDateTime := Now;
  fdsCntReceberPOSICAO.AsString := 'AB';
  fdsCntReceberPREFIXO.AsString := 'CR';
  fdsCntReceberIDCLIENTE.AsInteger := idCliente;
  fdsCntReceberDINHEIRO.AsFloat := 0;
  fdsCntReceberVALOR.AsFloat := valorTotal;
  fdsCntReceberIDPORTADOR.AsInteger := DM.fdsConfigIDPORTADOR_PADRAO.AsInteger;
  fdsCntReceberIDFORMA_PAG.AsInteger := idFormaPag;
  fdsCntReceberIDVENDA.AsInteger := 0;
  fdsCntReceberTIPO_VENDA.AsString := 'TR';
  fdsCntReceberTOT_PARCELA.AsString := utils.FormataParcelas(parcelasTotal);

  fdsCntReceber.Post;
  DM.conexao.CommitRetaining;
end;

procedure TfrmBaixaDocumento.GravaCntReceberItem(prefixo, parcela: string;
  dtVenc: TDate; valor: Double);
begin
  qryInsertCntReceber_Item.Close;

  qryInsertCntReceber_Item.ParamByName('POSICAO').AsString := 'AB';
  qryInsertCntReceber_Item.ParamByName('PREFIXO').AsString := prefixo;
  qryInsertCntReceber_Item.ParamByName('DT_VENC').AsDateTime := dtVenc;
  qryInsertCntReceber_Item.ParamByName('VALOR').AsFloat := valor;
  qryInsertCntReceber_Item.ParamByName('PARCELA').AsString := parcela;
  qryInsertCntReceber_Item.ParamByName('IDRECEBER').AsInteger := idReceber;
  qryInsertCntReceber_Item.ParamByName('IDFILIAL').AsInteger := DM.fdsConfigIDFILIAL.AsInteger;

  qryInsertCntReceber_Item.Prepare;
  qryInsertCntReceber_Item.ExecQuery;

  DM.conexao.CommitRetaining;
end;

function TfrmBaixaDocumento.RetornaCntReceberItemID(idFilial: Integer;
  valor: Double; dt_venc: TDate): Integer;
begin
  qryRetornaIDCntReceber_Item.Close;
  qryRetornaIDCntReceber_Item.ParamByName('IDRECEBER').AsInteger := idReceber;
  qryRetornaIDCntReceber_Item.ParamByName('IDFILIAL').AsInteger := idFilial;
  qryRetornaIDCntReceber_Item.ParamByName('VALOR').AsFloat := valor;
  qryRetornaIDCntReceber_Item.ParamByName('DT_VENC').AsDateTime := dt_venc;
  qryRetornaIDCntReceber_Item.Prepare;
  qryRetornaIDCntReceber_Item.ExecQuery;
  Result := qryRetornaIDCntReceber_Item.FieldByName('ID').AsInteger;
end;

procedure TfrmBaixaDocumento.VerificaContaQuitada;
var
  tempVlrPago : Double;
begin
  with qryConsulta do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * FROM CNT_RECEBER_ITEM WHERE IDRECEBER = :IDRECEBER AND IDFILIAL = :IDFILIAL AND POSICAO = ' + QuotedStr('AB'));
    ParamByName('IDRECEBER').AsInteger := idReceber;
    ParamByName('IDFILIAL').AsInteger := DM.fdsConfigIDFILIAL.AsInteger;
    Prepare;
    ExecQuery;
  end;

  if qryConsulta.RecordCount = 0 then
  begin
    with qryConsulta do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE CNT_RECEBER SET POSICAO = :POSICAO WHERE ID = :ID AND IDFILIAL = :IDFILIAL');
      ParamByName('ID').AsInteger := idReceber;
      ParamByName('IDFILIAL').AsInteger := DM.fdsConfigIDFILIAL.AsInteger;
      ParamByName('POSICAO').AsString := 'PG';
      Prepare;
      ExecQuery;
    end;
  end;

  with qryConsulta do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE CNT_RECEBER SET VALOR_PAGO = (SELECT SUM(VALOR_PAGO) FROM CNT_RECEBER_ITEM WHERE IDRECEBER = :ID AND IDFILIAL = :IDFILIAL) ');
    SQL.Add(' WHERE ID = :ID AND IDFILIAL = :IDFILIAL');
    ParamByName('ID').AsInteger := idReceber;
    ParamByName('IDFILIAL').AsInteger := DM.fdsConfigIDFILIAL.AsInteger;
    Prepare;
    ExecQuery;
  end;

end;

procedure TfrmBaixaDocumento.VerificaTipoConta;
var
  sqlConta, nomeCampoId, nomeCampoIdMov : string;
  nomeCampoPai, sqlTipo : string;


begin
//  if tipo = 'Pagar' then
//  begin
//    sqlConta := 'CNT_PAGAR';
//    nomeCampoPai := 'IDPAGAR';
//    nomeCampoId := 'IDFORNECEDOR';
//    nomeCampoIdMov := 'IDCOMPRA';
//    sqlTipo := 'PAG';
//  end
//  else
//  begin
//     sqlConta := 'CNT_RECEBER';
//     nomeCampoPai := 'IDRECEBER';
//     nomeCampoId := 'IDCLIENTE';
//     nomeCampoIdMov := 'IDVENDA';
//     sqlTipo := 'REC';
//  end;
//
//  with fdsConta do
//  begin
//    Close;
//    AutoUpdateOptions.GeneratorName := 'GEN_ID_' + sqlConta;
//    AutoUpdateOptions.UpdateTableName := sqlConta;
//    InsertSQL.Clear;
//    InsertSQL.Add('INSERT INTO ' + sqlConta);
//    InsertSQL.Add(' (ID, IDFILIAL, DT_INC, DT_ALT, POSICAO, PREFIXO, REFERENCIA, ' + nomeCampoId + ', ');
//    InsertSQL.Add('ACRESCIMO, DESCONTO, VALOR, VALOR_PAGO, IDPORTADOR, HISTORICO, IDFORMA_PAG, ' + nomeCampoIdMov + ', ');
//    InsertSQL.Add('TOT_PARCELA, PARCELAS_PG, DINHEIRO, ENVIADO_WEB');
//
//    if tipo = 'Pagar' then
//    begin
//      InsertSQL.Add(', DESCRICAO');
//    end
//    else
//    begin
//      InsertSQL.Add(', TIPO_VENDA');
//    end;
//
//    InsertSQL.Add(') VALUES(:ID, :IDFILIAL, :DT_INC, :DT_ALT, :POSICAO, :PREFIXO, :REFERENCIA, :IDCLIENTE, ');
//    InsertSQL.Add(':ACRESCIMO, :DESCONTO, :VALOR, :VALOR_PAGO, :IDPORTADOR, :HISTORICO, :IDFORMA_PAG, :IDVENDA, ');
//    InsertSQL.Add(':TOT_PARCELA, :PARCELAS_PG, :DINHEIRO, :ENVIADO_WEB');
//
//    if tipo = 'Pagar' then
//    begin
//      InsertSQL.Add(', :DESCRICAO)');
//    end
//    else
//    begin
//      InsertSQL.Add(', :TIPO_VENDA)');
//    end;
//
//    Prepare;
//  end;
//
//  with qryInsertContaItem do
//  begin
//    Close;
//    SQL.Clear;
//    SQL.Add('INSERT INTO ' + sqlConta + '_ITEM (' + nomeCampoPai + ', IDFILIAL, POSICAO, PREFIXO, DT_VENC, VALOR, PARCELA ) ');
//    SQL.Add('VALUES ( :IDCONTA, :IDFILIAL, :POSICAO, :PREFIXO, :DT_VENC, :VALOR, :PARCELA )');
//    Prepare;
//  end;
//
//  with qryInsertChequeConta do
//  begin
//    Close;
//    SQL.Clear;
//    SQL.Add('INSERT INTO ' + sqlConta + '_CHEQUE ( ' + nomeCampoPai + '_ITEM, IDFILIAL, IDBANCO, AGENCIA, CONTA, NUM_CHEQUE, ');
//    SQL.Add('DT_EMISSAO, EMITENTE, VALOR, DT_VENCIMENTO) VALUES (:IDCONTA_ITEM, :IDFILIAL, :IDBANCO, :AGENCIA, ');
//    SQL.Add(':CONTA, :NUM_CHEQUE, :DT_EMISSAO, :EMITENTE, :VALOR, :DT_VENCIMENTO )');
//    Prepare;
//  end;
//
//  with qryEditContaItem do
//  begin
//    Close;
//    SQL.Clear;
//    SQL.Add('UPDATE ' + sqlConta + '_ITEM SET POSICAO = :POSICAO, DT_PAG = :DT_PAG, VALOR_PAGO = :VALOR_PAGO, ');
//    SQL.Add('PAGAMENTO_MOEDA = :PAGAMENTO_MOEDA, ' + sqlTipo + '_DESC_ACRE = :' + sqlTipo + '_DESC_ACRE, ' + sqlTipo + '_DINHEIRO = :' + sqlTipo + '_DINHEIRO ');
//    SQL.Add('WHERE ID = :ID AND IDFILIAL = :IDFILIAL');
//    Prepare;
//  end;
//
//  with qryEditChequeConta do
//  begin
//    Close;
//    SQL.Clear;
//    SQL.Add('UPDATE ' + sqlConta + '_CHEQUE SET IDBANCO = :IDBANCO, AGENCIA = :AGENCIA, CONTA = :CONTA, ');
//    SQL.Add('NUM_CHEQUE = :NUM_CHEQUE, DT_EMISSAO = :DT_EMISSAO, EMITENTE = :EMITENTE, VALOR = :VALOR, ');
//    SQL.Add('DT_VENCIMENTO = :DT_VENCIMENTO WHERE ID = :ID AND IDFILIAL = :IDFILIAL');
//    Prepare;
//  end;
//
//  with qryRetornaIDContaItem do
//  begin
//    Close;
//    SQL.Clear;
//    SQL.Add('SELECT ID FROM ' + sqlConta + '_ITEM WHERE VALOR = :VALOR ');
//    SQL.Add('AND DT_VENC = :DT_VENC AND ' + nomeCampoPai + ' = :IDCONTA AND IDFILIAL = :IDFILIAL');
//   // SQL.SaveToFile('D:\cnt_receber_cheque.sql');
//    Prepare;
//  end;
end;

end.
